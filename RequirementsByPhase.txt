
We are going to build a game somewhat like Zork (text-based adventure) mixed
with Final Fantasy VII or the like, and we are going to do it in phases.  I do
not have an idea for what the purpose of the game will be or its story, but we
can figure that out over time.

You may look ahead, but if you do, try not to plan for the upcoming phases. The
requirements (dictated by the details of the phase) will be changing over time
just as they do in real life; however, in real life you don't get to know how
they are going to change.  This is will result in refactoring, and is something
I did not learn in school.

In each phase, the requirements of the game will be listed.  As time goes on, I
will be providing less and less help upfront (supplying the design, supplying
important questions to answer with the design, leading comments in code, etc)
and the phases will become more and more complex; as that happens, I want you to
create a small design plan in the space provided in the phase's section.  Do not
start really coding (more than for testing purposes) until the design has been
approved to avoid going down the wrong path.


________________________________________________
________________________________________________
 .-------------------------.
 |  : PHASE 1 :            |
 |  '---------'            |
 |                         |
 | Simple, static missions |
 |                         |
 '-------------------------'

  .---------.
 ( Phase 1.1 )
  '---------'
A single-menu-driven interface.
1 menu with 5 actions plus quit.
      .----------.
     ( Design 1.1 )
      '----------'
    - Add more menu items in the showMenuDialog() method.
    - Add a handler for each new item in the handleInput() method.

  .---------.
 ( Phase 1.2 )
  '---------'
After the first time the user enters their name, don't have them enter it again;
the program should remember it after the first time.
      .----------.
     ( Design 1.2 )
      '----------'
    - Create a variable to hold the name and initialize it to an empty string
      (username = "").
    - Only ask the user to enter their name if the variable hasn't been set to
      anything (create an if statement with argument:  username == "").  Update
      the username variable when the user enters it.
    {Note the difference between the above 2 lines}

  .---------.
 ( Phase 1.3 )
  '---------'
Multiple menus
Add 2 more actions (7 total + quit) that lead to 2 more menus.
These new menus should have a back option, similar to quit, that allows the user
to go back to the main menu without doing any action in that menu
      .----------.
     ( Design 1.3 )
      '----------'
    - Make these new menus themed as "going to do something"
    - Rename the showMenuDialog() method to showMainMenuDialog()
      (in eclipse, if you highlight the function name and press Alt + Shift + R,
      it will rename every place where it is called; this is also in the
      refactor menu from right clicking)
    - Rename handleInput() to handleMainMenuInput()
    - Create new methods show<DescriptiveName>MenuDialog()
    - When the action in main menu opens another menu, copy and paste the code
      in run(), but change it to call the appropriate submenu's handler method.

  .---------.
 ( Phase 1.4 )
  '---------'
You can probably see that phase 1.3 was basically just a lot of copy / pasting.
This is not only annoying, but it makes the code unmaintainable (what if later
we realize that we need to make some other intermediary step after we have 30
menus? We would need to update ALL of those places... and what if we miss
some?!).
Refactor the menus we created into separate classes to reuse much of the logic.
      .----------.
     ( Design 1.4 )
      '----------'
    - We clearly can't reuse ALL of the code, the creating of menu contents and
      handling of those selections is clearly specific to each menu.  However
      the entire flow is abstract (not implementation-specific).
    - (Note:  I'll probably have to help you with this)
    - Create a new class called Menu.
      + In Menu, create a list member variable that every menu will have to
        populate in their constructor.  We will use the list and indexes to the
        list instead of hard-coding the numbers in each entry.  We will always
        add "back" as the last item as a way to close out of the menu.
      + In Menu, create the following methods:
        * interact() - This will be what is currently run(). The idea is that we
          will call interact() on any menu (allowing for easy submenu handling).
          This will call showChoices(), getValidChoice(), and handleChoice().
        * showChoices() - Loop over the items in the list, displaying the index
          and then the message.
        * getValidChoice() - This will loop on getting the user's input until a
          valid choice is entered (a valid index in the list).
        * handleChoice() - This will call handleChoiceImpl() then check if
          "back" was the choice to allow exiting the menu.
        * handleChoiceImpl() - Abstract method - force classes inheriting from
          Menu to implement this code (how could this know what all of them want
          to do?). 
          {Impl is short for implementation.  Here abstract means we know an
          implementation of this class will have this method implemented, but we
          don't know or care what it does with it.)
    - Create new classes MainMenu and your named menus from above that inherit
      from Menu.
      + The constructors just need to populate the list created in Menu.
      + The class will need to implement handleChoiceImpl()


________________________________________________
________________________________________________
 .--------------------------.
 |  : PHASE 2 :             |
 |  '---------'             |
 |                          |
 | Navigate through a world |
 |                          |
 '--------------------------'

Now that we have a menu system (which will let us interact with the world), we
need to make a world to interact with.

  .---------.
 ( Phase 2.1 )
  '---------'
We will use the menus to move to different "tiles".  Each tile will have a
description of that area (what the user can see).  Tiles will be connected to
other tiles and the user will be able to navigate between them by going north,
south, east, or west.  Create 12 tiles, connected in any way.  To begin with,
the description of the area for each tile can simply be a unique number (1-12).
How do we represent a tile?  How will we navigate?  How will the user know where
he can and cannot navigate?  What happens if he tries to navigate off the map
(where we haven't created a tile yet), and how can we prevent it?
      .----------.
     ( Design 2.1 )
      '----------'
    -

  .---------.
 ( Phase 2.2 )
  '---------'
      .----------.
     ( Design 2.2 )
      '----------'
    -

  .---------.
 ( Phase X.Y )
  '---------'
      .----------.
     ( Design X.Y )
      '----------'
    -
